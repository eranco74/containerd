variant: openshift
version: 4.11.0
metadata:
  name: 98-containerd-config
  labels:
    machineconfiguration.openshift.io/role: worker
systemd:
  units:
    - name: containerd.service
      enabled: true
      contents: |
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network.target local-fs.target replace-crio-with-containerd.service
        [Service]
        ExecStartPre=-/sbin/modprobe overlay
        ExecStart=/bin/containerd --config /etc/containerd/config.toml
        Type=notify
        Delegate=yes
        KillMode=process
        Restart=always
        RestartSec=5
        # Having non-zero Limit*s causes performance problems due to accounting overhead
        # in the kernel. We recommend using cgroups to do container-local accounting.
        LimitNPROC=infinity
        LimitCORE=infinity
        LimitNOFILE=infinity
        # Comment TasksMax if your systemd version does not supports it.
        # Only systemd 226 and above support this version.
        TasksMax=infinity
        OOMScoreAdjust=-999
        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubernetes Kubelet
        Wants=rpc-statd.service network-online.target
        Requires=containerd.service kubelet-auto-node-size.service
        After=network-online.target containerd.service kubelet-auto-node-size.service
        After=ostree-finalize-staged.service

        [Service]
        Type=notify
        ExecStartPre=/bin/mkdir --parents /etc/kubernetes/manifests
        ExecStartPre=/bin/rm -f /var/lib/kubelet/cpu_manager_state
        ExecStartPre=/bin/rm -f /var/lib/kubelet/memory_manager_state
        EnvironmentFile=/etc/os-release
        EnvironmentFile=-/etc/kubernetes/kubelet-workaround
        EnvironmentFile=-/etc/kubernetes/kubelet-env
        EnvironmentFile=/etc/node-sizing.env

        ExecStart=/usr/bin/hyperkube \
            kubelet \
              --config=/etc/kubernetes/kubelet.conf \
              --bootstrap-kubeconfig=/etc/kubernetes/kubeconfig \
              --kubeconfig=/var/lib/kubelet/kubeconfig \
              --container-runtime=remote \
              --container-runtime-endpoint=/var/run/containerd/containerd.sock \
              --runtime-cgroups=/system.slice/containerd.service \
              --node-labels=node-role.kubernetes.io/worker,node.openshift.io/os_id=${ID} \
              --node-ip=${KUBELET_NODE_IP} \
              --address=${KUBELET_NODE_IP} \
              --minimum-container-ttl-duration=6m0s \
              --volume-plugin-dir=/etc/kubernetes/kubelet-plugins/volume/exec \
              --cloud-provider= \
               \
              --hostname-override=${KUBELET_NODE_NAME} \
              --pod-infra-container-image=quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:3eae807eb2d1f539ffa799861749eddb8606932fbfd6ef5e82aaa287348b7a07 \
              --system-reserved=cpu=${SYSTEM_RESERVED_CPU},memory=${SYSTEM_RESERVED_MEMORY} \
              --v=${KUBELET_LOG_LEVEL}

        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: fake-crio-sock-for-sdn.service
      enabled: true
      contents: |
        [Install]
        WantedBy=multi-user.target
        [Unit]
        Description=Fake CRI-O socket for OpenShift SDN
        Requires=containerd.service
        After=containerd.service
        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c "mkdir -p /var/run/crio && touch /var/run/crio/crio.sock && mount --bind /var/run/containerd/containerd.sock /var/run/crio/crio.sock"

    - name: replace-crio-with-containerd.service
      enabled: true
      contents: |
        [Install]
        WantedBy=multi-user.target
        [Unit]
        Description=replace CRI-O with containerd
        Requires=network.target
        After=ostree-finalize-staged.service
        [Service]
        Type=oneshot
        ExecStartPre=/bin/mkdir -p /opt/replace-crio-with-containerd
        WorkingDirectory=-/opt/replace-crio-with-containerd
        # Would prefer to do Restart=on-failure instead of this bash retry loop, but
        # the version of systemd we have right now (239) doesn't support it. It should be
        # available in systemd v244 and higher.
        ExecStart=/bin/bash -c " \
          until /usr/local/bin/replace-crio-with-containerd.sh; \
          do \
          echo 'Failed to execute replace-crio-with-containerd.sh, going to retry in 10 seconds' \
          sleep 10; \
          done"
storage:
  files:
    - path: /etc/containerd/config.toml
      contents:
        local: /etc/containerd/config.toml
      mode: 0644
    - path: /etc/crictl.yaml
      contents:
        local: /etc/crictl.yaml
      mode: 0644
    - path: /usr/local/bin/replace-crio-with-containerd.sh
      contents:
        local: /usr/local/bin/replace-crio-with-containerd.sh
      mode: 0744

